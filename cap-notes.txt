Какие виды изменений есть для наших ресурсов.

Update для Bookmark: 
Изменение URL. Может показаться что это нелогично, потому что здесь URL - это что-то вроде логического id. 
На самом деле это не так.
Ссылки-закладки с одинаковым URL могут находиться в разных коллекциях, и это будут разные Bookmark.
Пример когда может понадобиться изменить URL: URL конкретного пункта туториала меняется на URL всего туториала.
Изменение ключевых слов, описания.

Update для BookmarkCollection: 
Изменение названия, описания.
Изменение child_bookmark_collections - изменение списка айдишек коллекций, вложенных в данную.
Изменение bookmarks - изменение списка айдишек закладок, которые входят в данную коллекцию.

Можно сказать, что для нашего сервиса:
Все виды изменений, удаления происходят не часто.
Добавления происходят тоже не часто.
А вот чтений предполагается много.

Варианты при расщеплении системы:
1) Запрещать запись, обновления, удаления - сохранение консистентности.
2) Что-то запрещать. Пожалуй, самые редко используемые операции - это обновление и удаление. 
Нам гораздо важнее дать возможность добавить закладку и прочитать закладки, чем дать возможность изменять иерархию, 
изменять описания, или удалять закладки.
Тем более поддерживать консистентность с разрешёнными удалениями и обновлениями довольно трудно.
Поэтому можем запрещать запись и обновления. А для добавлений поддержать
eventual consistency значительно проще(по сути дела просто мержить).
Пример неприятной ситуации 2.1 связанный с отсутстивем консистентности: человек добавляет закладку, попадая на один сервер,
потом хочет найти её, но попадает на другой сервер, где её нет.
Будем считать, что такая ситуация крайне маловероятна.
А более вероятная ситуация 2.2, когда один пользователь попадает на один сервер и добавляет закладку
и впоследствии попадает на тот же сервер при чтении, а другой пользователь попадает 
на другой сервер, где этой закладки нет - он получает устаревшие данные. Такой случай некритичен.

Приоритет у нас по чтениям. Но вопрос выбора Consistency либо Availability зависит
от доступности операций изменения, удаления, добавления при расщеплении.
Доступность удалений и изменений откровенно говоря слишком сложны, сами операции довольно редки. Их мы запрещаем. 
Добавление - это вторая по значимости для нашего сервиса операция. Её желательно оставить доступной и после расщепления системы.
Если у нас нет ситуаций 2.1, то разрешаем чтение и после расщепления.
Иначе придётся запретить и запись - тогда сохраним консистентность.
 
В теории лучше было бы выбрать Availability для записи. Тогда можно было бы использовать, например, CoucheDB, Cassandra.
Но на практике лучше выбрать MongoDB из-за её простоты и большого комьюнити. 

